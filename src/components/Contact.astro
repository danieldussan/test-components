---
import { LiaPhoneVolumeSolid } from "react-icons/lia";
import { MdOutlineMailOutline } from "react-icons/md";

import { getEntry } from "astro:content";
import { FaCircleExclamation } from "react-icons/fa6";
import { FaCheckCircle } from "react-icons/fa";
import Input from "./Input.astro";
const { lang } = Astro.props;

const homepage = await getEntry(lang === "en" ? "en" : "es", "homepage");

const { contact } = homepage?.data;
const { title, subtitle, form, info, dropdown, textMobile, modal, modalError } = contact;
---

<section class="bg-[#F7F7FD] w-screen pb-5 xl:py-6">
  <div class="flex flex-col items-center justify-center xl:mb-4"
    data-animate-classes="animate-fade-in-up">
    <h1 class="text-3xl font-extralight text-center text-gray-500 mt-6 mb-4 md:text-4xl lg:text-[56px] xl:text-[62px] 2xl:text-[70px]">{title}</h1>
    <p class="text-gray-500 text-center text-xs font-light max-w-[300px] md:max-w-md md:text-[16px] lg:text-lg lg:max-w-2xl xl:text-xl xl:max-w-3xl 2xl:text-2xl 2xl:max-w-4xl">
    {subtitle}</p>
  </div>

  <div class="my-5 xl:my-7" data-animate-classes="animate-fade-in-up">
    <form class="flex flex-col justify-center items-center">
      <div class="flex flex-col justify-center items-center md:flex-row md:mb-6">
        <div class="relative">
          <Input
            type="text"
            name={form.name}
            placeholder={form.name}
            variant="primary"
            id="formName"> 
            <span id="nameError" slot="after" class="text-red-500 pl-1 hidden text-xs">{form.nameError}
            </span> </Input>
        </div>

        <div class="relative">
          <Input
            type="email"
            name={form.email}
            placeholder={form.email}
            variant="primary"
            id="formEmail"> 
            <span id="emailError" slot="after" class="text-red-500 pl-1 hidden text-xs">{form.emailError}
            </span> </Input>
        </div>

        <div class="relative">
          <Input
            type="number"
            name={form.phone}
            placeholder={form.phone}
            variant="primary"
            id="formPhone"> 
            <span id="phoneError" slot="after" class="text-red-500 pl-1 hidden text-xs">{form.phoneError}
            </span> </Input>
        </div>
          <button class="rounded-lg py-2 px-14 bg-[#5091F9] tracking-[0.3rem] text-white font-bold max-w-max text-center mb-5 md:mb-[0px] md:ml-3 md:px-10 lg:max-w-48 xl:max-w-56 xl:text-base xl:py-2" type="submit">{form.submit}</button>
      </div>

      <div class="hidden md:flex justify-center items-center gap-x-10 md:pr-[75px] lg:pr-[240px] xl:pr-[360px]"
        data-animate-classes="animate-fade-in-up">
        <div class="flex items-center space-x-2 rounded-md">
          <LiaPhoneVolumeSolid
            className="text-blue-500 text-2xl mr-1 md:text-xl lg:text-2xl"
          />
          <div class="flex flex-col items-start text-[13px]">
            <span class="text-gray-500 font-bold">{info.phone.text}</span>
            <span class="text-blue-500">{info.phone.phoneNumber}</span>
          </div>
        </div>
        <div class="sm:flex items-center space-x-2 rounded-md">
          <MdOutlineMailOutline
            className="text-blue-500 text-2xl mr-1 md:text-xl lg:text-2xl"
          />
          <div class="flex flex-col items-start text-[13px]">
            <span class="text-gray-500 font-bold">{info.email.text}</span>
            <span class="text-blue-500">{info.email.emailContent}</span>
          </div>
        </div>
        <div class="relative inline-block">
          <select
            class="block appearance-none bg-transparent border border-[#E0E0E0] rounded-md p-2 pr-12 pl-4 focus:outline-none font-normal text-[14px]"
          >
            <option>{dropdown.text}</option>
            {
              dropdown.options.map((label: string) => (
                <option value={label}>{label}</option>
              ))
            }
          </select>
        </div>
      </div>
    </form>
  </div>


  <div class="flex justify-center md:hidden">
    <p class="text-gray-500 text-center text-xs max-w-[300px]">
      {textMobile.content}
    </p>
  </div>

  <div>
    <div id="containerModalSuccess" class="fixed left-0 right-0 top-0 bottom-0 z-50 flex justify-center items-center invisible">
      <dialog id="dialogSuccess" class="rounded-3xl transition-opacity duration-500 opacity-0" data-animate-classes="animate-fade-in">
        <div class="m-auto w-[90%] max-w-xl bg-white max-h-[90%] py-[3rem] px-[2.5rem] rounded-3xl grid place-items-center gap-5">
            {<FaCheckCircle className="text-5xl text-green-500" />}
            <h2 class="text-center text-xl font-bold">{modal.title}</h2>
            <p class="text-center">{modal.text}</p>
            <label id="cancelSuccess" class="cursor-pointer mt-2 px-6 py-2 bg-blue-500 rounded-xl text-white font-semibold">{modal.textButton}</label>
        </div>
      </dialog>
    </div>
    
    <div id="containerModalError" class="fixed left-0 right-0 top-0 bottom-0 flex justify-center items-center invisible">
      <dialog id="dialogError" class="rounded-3xl transition-opacity duration-500 opacity-0">
        <div class="m-auto w-[90%] max-w-xl bg-white max-h-[90%] py-[3rem] px-[2.5rem] rounded-3xl grid place-items-center gap-5">
            {<FaCircleExclamation className="text-5xl text-red-500"/>}
            <h2 class="text-center text-xl font-bold">{modalError.title}</h2>
            <p class="text-center">{modalError.text}</p>
            <label id="cancelError" class="cursor-pointer mt-2 px-6 py-2 bg-blue-500 rounded-xl text-white font-semibold">{modalError.textButton}</label>
        </div>
      </dialog>
    </div>
  </div>
</section>



<script>
  const form = document.querySelector("form") as HTMLFormElement;
  

  const dialogSuccess = document.getElementById("dialogSuccess") as HTMLDialogElement;
  const dialogError = document.getElementById("dialogError") as HTMLDialogElement;
  const cancelButton = document.getElementById("cancelSuccess") as HTMLLabelElement;
  const cancelButtonError = document.getElementById("cancelError") as HTMLLabelElement;

  const test = true;

  form.addEventListener("submit", function (event: Event): void {
    event.preventDefault();
    if (test){
      dialogSuccess.showModal();
      dialogSuccess.classList.add("opacity-100");
      // containerModalSuccess.classList.remove("invisible");
    }else {
      dialogError.showModal();
      dialogError.classList.add("opacity-100");
      // containerModalError.classList.remove("invisible");
    }

  });

  cancelButton.addEventListener("click", function (event: Event): void {
    event.preventDefault();
    dialogSuccess.close();
    // containerModalSuccess.classList.add("invisible");
  });

  cancelButtonError.addEventListener("click", function (event: Event): void {
    event.preventDefault();
    dialogError.close();
    // containerModalSuccess.classList.add("invisible");
  });

</script>
